{"version":3,"sources":["data.js","App.js","serviceWorker.js","index.js"],"names":["CVData","personalData","name","title","image","contacts","type","value","sections","content","icon","items","authority","authorityWebSite","rightSide","description","company","companyWebSite","companyMeta","datesBetween","descriptionTags","groups","sectionHeader","projectUrl","authorityMeta","App","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4MAAaA,EAAS,CACpBC,aAAc,CACZC,KAAM,cACNC,MAAO,oBACPC,MAAO,mDACPC,SAAU,CACR,CAAEC,KAAM,QAASC,MAAO,wBACxB,CAAED,KAAM,QAASC,MAAO,uBACxB,CAAED,KAAM,WAAYC,MAAO,SAC3B,CAAED,KAAM,UAAWC,MAAO,wBAC1B,CAAED,KAAM,WAAYC,MAAO,yCAC3B,CAAED,KAAM,UAAWC,MAAO,0BAC1B,CAAED,KAAM,SAAUC,MAAO,2BAG7BC,SAAU,CACR,CACEF,KAAM,OACNH,MAAO,iBACPM,QACE,8OACFC,KAAM,WAER,CACEJ,KAAM,cACNH,MAAO,YACPO,KAAM,aACNC,MAAO,CACL,CACER,MAAO,4BACPS,UAAW,sBACXC,iBAAkB,qBAClBC,UAAW,iBAIjB,CACER,KAAM,mBACNH,MAAO,cACPY,YAAa,WACbL,KAAM,UACNC,MAAO,CACL,CACER,MAAO,qBACPa,QAAS,uBACTD,YAAa,oCACbE,eAAgB,IAChBC,YAAa,GACbC,aAAc,oBACdC,gBAAiB,CAAC,aAAc,YAItC,CACEd,KAAM,gBACNH,MAAO,6BACPO,KAAM,QACNW,OAAQ,CACN,CACEC,cAAe,eACfP,YAAa,WACbJ,MAAO,CACL,CACER,MAAO,cACPoB,WAAY,uCACZR,YAAa,qDAEf,CACEZ,MAAO,cACPoB,WAAY,4CACZR,YAAa,iDAEf,CACEZ,MAAO,kDACPoB,WAAY,oCACZR,YACE,2DAMZ,CACET,KAAM,cACNH,MAAO,eACPY,YAAa,GACbL,KAAM,WACNC,MAAO,CACL,CACER,MAAO,+CACPS,UAAW,cACXC,iBACE,oEAIR,CACEP,KAAM,cACNH,MAAO,YACPO,KAAM,WACNC,MAAO,CACL,CACEC,UAAW,UACXY,cAAe,kBAIrB,CACElB,KAAM,WACNH,MAAO,qBACPO,KAAM,SACNC,MAAO,CACL,QACA,aACA,MACA,MACA,YACA,SACA,QACA,SAGJ,CACEL,KAAM,WACNH,MAAO,sBACPO,KAAM,QACNC,MAAO,CAAC,cAAe,QAAS,YCzHjBc,E,uKAEjB,OACE,6BACE,kBAAC,IAAOzB,Q,GAJiB0B,aCObC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.3b76910a.chunk.js","sourcesContent":["export const CVData = {\r\n  personalData: {\r\n    name: \"Emin Vergil\",\r\n    title: \"Software Engineer\",\r\n    image: \"https://bulma.io/images/placeholders/128x128.png\",\r\n    contacts: [\r\n      { type: \"email\", value: \"eminvergil@yahoo.com\" },\r\n      { type: \"phone\", value: \"+00 (123) 456 78 90\" },\r\n      { type: \"location\", value: \"Adana\" },\r\n      { type: \"website\", value: \"eminvergil.github.io\" },\r\n      { type: \"linkedin\", value: \"linkedin.com/in/emin-vergil-b13731125\" },\r\n      { type: \"twitter\", value: \"twitter.com/eminvergil\" },\r\n      { type: \"github\", value: \"github.com/eminvergil\" },\r\n    ],\r\n  },\r\n  sections: [\r\n    {\r\n      type: \"text\",\r\n      title: \"Career Profile\",\r\n      content:\r\n        \"I'm a passionate software developer living in Adana, Turkey. I am currenty working on my game, side projects. I love being part of development of web technologies. I build things on my GitHub profile (here). I love React and .Net Core.\",\r\n      icon: \"usertie\",\r\n    },\r\n    {\r\n      type: \"common-list\",\r\n      title: \"Education\",\r\n      icon: \"graduation\",\r\n      items: [\r\n        {\r\n          title: \"Computer Engineering (BS)\",\r\n          authority: \"Cukurova University\",\r\n          authorityWebSite: \"https://sample.edu\",\r\n          rightSide: \"2017 - 2022\",\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      type: \"experiences-list\",\r\n      title: \"Experiences\",\r\n      description: \"Optional\",\r\n      icon: \"archive\",\r\n      items: [\r\n        {\r\n          title: \"Software Developer\",\r\n          company: \"Remote Summer Intern\",\r\n          description: \"I have developed a todo list app.\",\r\n          companyWebSite: \"#\",\r\n          companyMeta: \"\",\r\n          datesBetween: \"2020.08 - 2020.09\",\r\n          descriptionTags: [\"Javascript\", \"React\"],\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      type: \"projects-list\",\r\n      title: \"Selected Personal Projects\",\r\n      icon: \"tasks\",\r\n      groups: [\r\n        {\r\n          sectionHeader: \"Company Name\",\r\n          description: \"Optional\",\r\n          items: [\r\n            {\r\n              title: \"Flappy Bird\",\r\n              projectUrl: \"github.com/eminvergil/flappy-bird-js\",\r\n              description: \"A touchscreen game built on HTML5,CSS,JAVASCRIPT.\",\r\n            },\r\n            {\r\n              title: \"Coffee Shop\",\r\n              projectUrl: \"github.com/eminvergil/coffee-shop-website\",\r\n              description: \"Simple coffe shop website built with REACT.JS\",\r\n            },\r\n            {\r\n              title: \"Mini E Commerce Website For Electronic Products\",\r\n              projectUrl: \" github.com/eminvergil/galleryapp\",\r\n              description:\r\n                \"Simple mini e commerce website build with .NET Core\",\r\n            },\r\n          ],\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      type: \"common-list\",\r\n      title: \"Certificates\",\r\n      description: \"\",\r\n      icon: \"comments\",\r\n      items: [\r\n        {\r\n          title: \"FreeCodeCamp Front End Libraries â€“ 2020\",\r\n          authority: \"Certificate\",\r\n          authorityWebSite:\r\n            \"freecodecamp.org/certification/fccc5b5bb58/front-end-libraries\",\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      type: \"common-list\",\r\n      title: \"Languages\",\r\n      icon: \"language\",\r\n      items: [\r\n        {\r\n          authority: \"English\",\r\n          authorityMeta: \"Professional\",\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      type: \"tag-list\",\r\n      title: \"Skills Proficiency\",\r\n      icon: \"rocket\",\r\n      items: [\r\n        \"React\",\r\n        \"Javascript\",\r\n        \"CSS\",\r\n        \"SQL\",\r\n        \".Net Core\",\r\n        \"Gatsby\",\r\n        \"HTML5\",\r\n        \"CSS3\",\r\n      ],\r\n    },\r\n    {\r\n      type: \"tag-list\",\r\n      title: \"Hobbies & Interests\",\r\n      icon: \"cubes\",\r\n      items: [\"Programming\", \"Games\", \"Books\"],\r\n    },\r\n  ],\r\n};\r\n","import React, { Component } from \"react\";\n\nimport CV from \"react-cv\";\nimport { CVData } from \"./data\";\n\nexport default class App extends Component {\n  render() {\n    return (\n      <div>\n        <CV {...CVData} />\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}